
B1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf5  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d3  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b0  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037b  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002902  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ee       	ldi	r30, 0xEA	; 234
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	7d d0       	rcall	.+250    	; 0x1ae <main>
  b4:	98 c0       	rjmp	.+304    	; 0x1e6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <toggle_e>:
 #define LCD_E 	3
 #define LCD_RS	2

  void toggle_e(void)
  {
	  PORTC |= (1<<LCD_E);
  b8:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8f ec       	ldi	r24, 0xCF	; 207
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <toggle_e+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <toggle_e+0xc>
  c4:	00 00       	nop
	  _delay_ms(1);
	  PORTC &= ~(1<<LCD_E);
  c6:	ab 98       	cbi	0x15, 3	; 21
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <toggle_e+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <toggle_e+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_write_data>:
	  _delay_ms(1);
  }

   void lcd_write_data(unsigned char byte)
   {
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	   // First nibble.
	   PORTC = byte;
  da:	85 bb       	out	0x15, r24	; 21
	   PORTC |= (1<<LCD_RS);
  dc:	aa 9a       	sbi	0x15, 2	; 21
	   toggle_e();
  de:	ec df       	rcall	.-40     	; 0xb8 <toggle_e>

	   // Second nibble
	   PORTC = (byte<<4);
  e0:	c2 95       	swap	r28
  e2:	c0 7f       	andi	r28, 0xF0	; 240
  e4:	c5 bb       	out	0x15, r28	; 21
	   PORTC |= (1<<LCD_RS);
	   toggle_e();
  e6:	aa 9a       	sbi	0x15, 2	; 21
  e8:	e7 df       	rcall	.-50     	; 0xb8 <toggle_e>
   }
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <lcd_command>:

    void lcd_command(unsigned char byte)
    {
  ee:	cf 93       	push	r28
  f0:	c8 2f       	mov	r28, r24
	    PORTC = byte;
  f2:	85 bb       	out	0x15, r24	; 21
	    PORTC &= ~(1<<LCD_RS);
  f4:	aa 98       	cbi	0x15, 2	; 21
	    toggle_e();
  f6:	e0 df       	rcall	.-64     	; 0xb8 <toggle_e>

	    // Second nibble
	    PORTC = (byte<<4);
  f8:	c2 95       	swap	r28
  fa:	c0 7f       	andi	r28, 0xF0	; 240
  fc:	c5 bb       	out	0x15, r28	; 21
	    PORTC &= ~(1<<LCD_RS);
	    toggle_e();
  fe:	aa 98       	cbi	0x15, 2	; 21
 100:	db df       	rcall	.-74     	; 0xb8 <toggle_e>
    }
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <init>:

 void init(void)
 {
 106:	cf 93       	push	r28
	DDRC = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 10c:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x20;	// function set
 10e:	c0 e2       	ldi	r28, 0x20	; 32
 110:	c5 bb       	out	0x15, r28	; 21
	toggle_e();
 112:	d2 df       	rcall	.-92     	; 0xb8 <toggle_e>

	// Step 3 (table 12)
	PORTC = 0x20;   // function set
	toggle_e();
 114:	c5 bb       	out	0x15, r28	; 21
 116:	d0 df       	rcall	.-96     	; 0xb8 <toggle_e>
	PORTC = 0x80;
 118:	80 e8       	ldi	r24, 0x80	; 128
	toggle_e();
 11a:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 11c:	cd df       	rcall	.-102    	; 0xb8 <toggle_e>
	toggle_e();
 11e:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 120:	cb df       	rcall	.-106    	; 0xb8 <toggle_e>
	toggle_e();
 122:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 124:	85 bb       	out	0x15, r24	; 21
	toggle_e();
 126:	c8 df       	rcall	.-112    	; 0xb8 <toggle_e>
 128:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 12a:	c6 df       	rcall	.-116    	; 0xb8 <toggle_e>
 12c:	80 e6       	ldi	r24, 0x60	; 96
	toggle_e();
 12e:	85 bb       	out	0x15, r24	; 21
 130:	c3 df       	rcall	.-122    	; 0xb8 <toggle_e>

 }
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <display_text>:

 void display_text(char *str)
 {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	for(;*str; str++){
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <display_text+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
 144:	c8 df       	rcall	.-112    	; 0xd6 <lcd_write_data>

 }

 void display_text(char *str)
 {
	for(;*str; str++){
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <display_text+0xe>
		lcd_write_data(*str);
	}
 }
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <set_cursor>:

 void set_cursor(int position)
 {
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
	lcd_command(0x02);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	c7 df       	rcall	.-114    	; 0xee <lcd_command>
	for(int i = 0; i < position; i++) {
 160:	10 16       	cp	r1, r16
 162:	11 06       	cpc	r1, r17
 164:	44 f4       	brge	.+16     	; 0x176 <set_cursor+0x24>
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
		lcd_command(0x14);
 16a:	84 e1       	ldi	r24, 0x14	; 20
 16c:	c0 df       	rcall	.-128    	; 0xee <lcd_command>
 }

 void set_cursor(int position)
 {
	lcd_command(0x02);
	for(int i = 0; i < position; i++) {
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	0c 17       	cp	r16, r28
 172:	1d 07       	cpc	r17, r29
 174:	d1 f7       	brne	.-12     	; 0x16a <set_cursor+0x18>
		lcd_command(0x14);
	}
	PORTC = 0x00;
 176:	15 ba       	out	0x15, r1	; 21
 }
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <clear_LCD>:

 void clear_LCD() {
	 lcd_command(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	b4 df       	rcall	.-152    	; 0xee <lcd_command>
	 lcd_command(0x02);
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	b2 cf       	rjmp	.-156    	; 0xee <lcd_command>
 18a:	08 95       	ret

0000018c <wait>:
 #include <avr/io.h>
 #include <util/delay.h>
 #include "lcd.h"

 void wait(int ms) {
	 for(int i = 0; i < ms; i++) {
 18c:	18 16       	cp	r1, r24
 18e:	19 06       	cpc	r1, r25
 190:	6c f4       	brge	.+26     	; 0x1ac <wait+0x20>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	ef ec       	ldi	r30, 0xCF	; 207
 198:	f7 e0       	ldi	r31, 0x07	; 7
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <wait+0xe>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <wait+0x14>
 1a0:	00 00       	nop
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	82 17       	cp	r24, r18
 1a8:	93 07       	cpc	r25, r19
 1aa:	a9 f7       	brne	.-22     	; 0x196 <wait+0xa>
 1ac:	08 95       	ret

000001ae <main>:
	 }
 }

int main(void)
{
    DDRC = 0xFF;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bb       	out	0x14, r24	; 20
    PORTC = 0x00;
 1b2:	15 ba       	out	0x15, r1	; 21
    
    DDRD = 0xFF;
 1b4:	81 bb       	out	0x11, r24	; 17
    PORTD = 0x01;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	82 bb       	out	0x12, r24	; 18
    
    init();
 1ba:	a5 df       	rcall	.-182    	; 0x106 <init>
	clear_LCD();
 1bc:	e2 df       	rcall	.-60     	; 0x182 <clear_LCD>
 1be:	84 e6       	ldi	r24, 0x64	; 100
	wait(100);
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	e4 df       	rcall	.-56     	; 0x18c <wait>
 1c4:	82 e0       	ldi	r24, 0x02	; 2
    set_cursor(2);
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	c4 df       	rcall	.-120    	; 0x152 <set_cursor>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
    display_text("hallo Hallo");
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	b3 df       	rcall	.-154    	; 0x136 <display_text>
    wait(2000);
 1d0:	80 ed       	ldi	r24, 0xD0	; 208
 1d2:	97 e0       	ldi	r25, 0x07	; 7
 1d4:	db df       	rcall	.-74     	; 0x18c <wait>
    clear_LCD();
 1d6:	d5 df       	rcall	.-86     	; 0x182 <clear_LCD>
	wait(100);
 1d8:	84 e6       	ldi	r24, 0x64	; 100
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	d7 df       	rcall	.-82     	; 0x18c <wait>
 1de:	8c e0       	ldi	r24, 0x0C	; 12
    display_text("We meet again");
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	a9 df       	rcall	.-174    	; 0x136 <display_text>
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <main+0x36>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
