
RGBTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a91  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000914  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035e  00000000  00000000  00001639  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a7  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	23 d0       	rcall	.+70     	; 0xfa <main>
  b4:	4c c0       	rjmp	.+152    	; 0x14e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
	OCR1B = greenValue;
}

void setBlue(unsigned char blueValue)
{
	OCR1C = blueValue;
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <timer1Init>:
  da:	11 be       	out	0x31, r1	; 49
  dc:	19 bc       	out	0x29, r1	; 41
  de:	18 bc       	out	0x28, r1	; 40
  e0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e4:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e8:	83 b7       	in	r24, 0x33	; 51
  ea:	89 66       	ori	r24, 0x69	; 105
  ec:	83 bf       	out	0x33, r24	; 51
  ee:	8f b5       	in	r24, 0x2f	; 47
  f0:	89 66       	ori	r24, 0x69	; 105
  f2:	8f bd       	out	0x2f, r24	; 47
  f4:	8b e0       	ldi	r24, 0x0B	; 11
  f6:	8e bd       	out	0x2e, r24	; 46
  f8:	08 95       	ret

000000fa <main>:
}

int main(void)
{
	DDRB = 0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  fe:	ed df       	rcall	.-38     	; 0xda <timer1Init>
	wait(100);
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	d9 df       	rcall	.-78     	; 0xb8 <wait>
	OCR1B = greenValue;
}

void setBlue(unsigned char blueValue)
{
	OCR1C = blueValue;
 106:	08 e7       	ldi	r16, 0x78	; 120
 108:	10 e0       	ldi	r17, 0x00	; 0
	timer1Init();
	wait(100);
    /*Replace with your application code */
	while (1) 
    {
		for(int i = 0; i < 6 ; i++){
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		setRed(pattern[i].red);
 10e:	fe 01       	movw	r30, r28
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
	TCCR1B = 0b00001011;
}

void setRed(unsigned char redValue)
{
	OCR0 = redValue;
 11e:	81 bf       	out	0x31, r24	; 49
	OCR1B = greenValue;
}

void setBlue(unsigned char blueValue)
{
	OCR1C = blueValue;
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	93 81       	ldd	r25, Z+3	; 0x03
 124:	99 27       	eor	r25, r25
 126:	f8 01       	movw	r30, r16
 128:	91 83       	std	Z+1, r25	; 0x01
 12a:	80 83       	st	Z, r24
    {
		for(int i = 0; i < 6 ; i++){
		setRed(pattern[i].red);
		setBlue(pattern[i].blue);

			if(i == 5){
 12c:	c5 30       	cpi	r28, 0x05	; 5
 12e:	d1 05       	cpc	r29, r1
 130:	41 f0       	breq	.+16     	; 0x142 <main+0x48>
				i = 0;
			}
			wait(1000);
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	c0 df       	rcall	.-128    	; 0xb8 <wait>
	timer1Init();
	wait(100);
    /*Replace with your application code */
	while (1) 
    {
		for(int i = 0; i < 6 ; i++){
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	c6 30       	cpi	r28, 0x06	; 6
 13c:	d1 05       	cpc	r29, r1
 13e:	3c f3       	brlt	.-50     	; 0x10e <main+0x14>
		setBlue(pattern[i].blue);

			if(i == 5){
				i = 0;
			}
			wait(1000);
 140:	e4 cf       	rjmp	.-56     	; 0x10a <main+0x10>
 142:	88 ee       	ldi	r24, 0xE8	; 232
 144:	93 e0       	ldi	r25, 0x03	; 3
 146:	b8 df       	rcall	.-144    	; 0xb8 <wait>
	timer1Init();
	wait(100);
    /*Replace with your application code */
	while (1) 
    {
		for(int i = 0; i < 6 ; i++){
 148:	c1 e0       	ldi	r28, 0x01	; 1
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <main+0x14>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
