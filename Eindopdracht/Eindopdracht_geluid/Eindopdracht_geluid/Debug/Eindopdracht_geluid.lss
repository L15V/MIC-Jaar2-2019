
Eindopdracht_geluid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a41  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090c  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000419  00000000  00000000  00001661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000498  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b5  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	a9 c0       	rjmp	.+338    	; 0x1ee <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e9 ef       	ldi	r30, 0xF9	; 249
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <adcInit>:

#define BIT(x)	(1 << (x))

void adcInit( void )
{
	ADMUX = 0b11100001;			// AREF=VCC, result left adjusted, channel1 at pin PF1
  c0:	81 ee       	ldi	r24, 0xE1	; 225
  c2:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b11100110;		// ADC-enable, no interrupt, start, free running, division by 64
  c4:	86 ee       	ldi	r24, 0xE6	; 230
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	08 95       	ret

000000ca <timer1MInit>:
}

void timer1MInit(void)
{
	OCR1B = 0;
  ca:	19 bc       	out	0x29, r1	; 41
  cc:	18 bc       	out	0x28, r1	; 40

	TCCR1A |= 1 << WGM00 | 1<<WGM01 | 1 << CS00 | 1<< COM01; //phasecorrect 10 bits mode
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	89 66       	ori	r24, 0x69	; 105
  d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001011;
  d4:	8b e0       	ldi	r24, 0x0B	; 11
  d6:	8e bd       	out	0x2e, r24	; 46
  d8:	08 95       	ret

000000da <main>:
}

int main( void )
{
	timer1MInit();
  da:	f7 df       	rcall	.-18     	; 0xca <timer1MInit>
	DDRB = 0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  e0:	81 bb       	out	0x11, r24	; 17
	DDRF = 0;	//Taking portF as input.
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	adcInit();
  e6:	ec df       	rcall	.-40     	; 0xc0 <adcInit>
	ADCSRA |= (1<<ADSC);  //starting the ADC conversion
  e8:	36 9a       	sbi	0x06, 6	; 6

		if(i > /*54400*/ 54100){
			PORTD ^= (1<<7);	// Toggle PORTD.7
			wait(100);

			OCR1B = 255;
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d0 e0       	ldi	r29, 0x00	; 0
	ADCSRA |= (1<<ADSC);  //starting the ADC conversion
	float i = 0;

	while (1)
	{
		i = ADC;
  ee:	64 b1       	in	r22, 0x04	; 4
  f0:	75 b1       	in	r23, 0x05	; 5

		if(i > /*54400*/ 54100){
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	16 d0       	rcall	.+44     	; 0x124 <__floatunsisf>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	34 e5       	ldi	r19, 0x54	; 84
  fc:	43 e5       	ldi	r20, 0x53	; 83
  fe:	57 e4       	ldi	r21, 0x47	; 71
 100:	4e d0       	rcall	.+156    	; 0x19e <__gesf2>
 102:	18 16       	cp	r1, r24
 104:	64 f4       	brge	.+24     	; 0x11e <main+0x44>
			PORTD ^= (1<<7);	// Toggle PORTD.7
 106:	82 b3       	in	r24, 0x12	; 18
 108:	80 58       	subi	r24, 0x80	; 128
			wait(100);
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	90 e0       	ldi	r25, 0x00	; 0

			OCR1B = 255;
 110:	c6 df       	rcall	.-116    	; 0x9e <wait>
 112:	d9 bd       	out	0x29, r29	; 41
			wait(100);
 114:	c8 bd       	out	0x28, r28	; 40
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	c1 df       	rcall	.-126    	; 0x9e <wait>
 11c:	e8 cf       	rjmp	.-48     	; 0xee <main+0x14>

			//Do something when it is too loud
			//TODO make this wotk with the buzzer and figure out what the best value is for the sound recognition
		}
		else{
			OCR1B = 0;
 11e:	19 bc       	out	0x29, r1	; 41
 120:	18 bc       	out	0x28, r1	; 40
 122:	e5 cf       	rjmp	.-54     	; 0xee <main+0x14>

00000124 <__floatunsisf>:
 124:	e8 94       	clt
 126:	09 c0       	rjmp	.+18     	; 0x13a <__floatsisf+0x12>

00000128 <__floatsisf>:
 128:	97 fb       	bst	r25, 7
 12a:	3e f4       	brtc	.+14     	; 0x13a <__floatsisf+0x12>
 12c:	90 95       	com	r25
 12e:	80 95       	com	r24
 130:	70 95       	com	r23
 132:	61 95       	neg	r22
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	8f 4f       	sbci	r24, 0xFF	; 255
 138:	9f 4f       	sbci	r25, 0xFF	; 255
 13a:	99 23       	and	r25, r25
 13c:	a9 f0       	breq	.+42     	; 0x168 <__floatsisf+0x40>
 13e:	f9 2f       	mov	r31, r25
 140:	96 e9       	ldi	r25, 0x96	; 150
 142:	bb 27       	eor	r27, r27
 144:	93 95       	inc	r25
 146:	f6 95       	lsr	r31
 148:	87 95       	ror	r24
 14a:	77 95       	ror	r23
 14c:	67 95       	ror	r22
 14e:	b7 95       	ror	r27
 150:	f1 11       	cpse	r31, r1
 152:	f8 cf       	rjmp	.-16     	; 0x144 <__floatsisf+0x1c>
 154:	fa f4       	brpl	.+62     	; 0x194 <__floatsisf+0x6c>
 156:	bb 0f       	add	r27, r27
 158:	11 f4       	brne	.+4      	; 0x15e <__floatsisf+0x36>
 15a:	60 ff       	sbrs	r22, 0
 15c:	1b c0       	rjmp	.+54     	; 0x194 <__floatsisf+0x6c>
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	8f 4f       	sbci	r24, 0xFF	; 255
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	16 c0       	rjmp	.+44     	; 0x194 <__floatsisf+0x6c>
 168:	88 23       	and	r24, r24
 16a:	11 f0       	breq	.+4      	; 0x170 <__floatsisf+0x48>
 16c:	96 e9       	ldi	r25, 0x96	; 150
 16e:	11 c0       	rjmp	.+34     	; 0x192 <__floatsisf+0x6a>
 170:	77 23       	and	r23, r23
 172:	21 f0       	breq	.+8      	; 0x17c <__floatsisf+0x54>
 174:	9e e8       	ldi	r25, 0x8E	; 142
 176:	87 2f       	mov	r24, r23
 178:	76 2f       	mov	r23, r22
 17a:	05 c0       	rjmp	.+10     	; 0x186 <__floatsisf+0x5e>
 17c:	66 23       	and	r22, r22
 17e:	71 f0       	breq	.+28     	; 0x19c <__floatsisf+0x74>
 180:	96 e8       	ldi	r25, 0x86	; 134
 182:	86 2f       	mov	r24, r22
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	2a f0       	brmi	.+10     	; 0x194 <__floatsisf+0x6c>
 18a:	9a 95       	dec	r25
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	88 1f       	adc	r24, r24
 192:	da f7       	brpl	.-10     	; 0x18a <__floatsisf+0x62>
 194:	88 0f       	add	r24, r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	97 f9       	bld	r25, 7
 19c:	08 95       	ret

0000019e <__gesf2>:
 19e:	03 d0       	rcall	.+6      	; 0x1a6 <__fp_cmp>
 1a0:	08 f4       	brcc	.+2      	; 0x1a4 <__gesf2+0x6>
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	08 95       	ret

000001a6 <__fp_cmp>:
 1a6:	99 0f       	add	r25, r25
 1a8:	00 08       	sbc	r0, r0
 1aa:	55 0f       	add	r21, r21
 1ac:	aa 0b       	sbc	r26, r26
 1ae:	e0 e8       	ldi	r30, 0x80	; 128
 1b0:	fe ef       	ldi	r31, 0xFE	; 254
 1b2:	16 16       	cp	r1, r22
 1b4:	17 06       	cpc	r1, r23
 1b6:	e8 07       	cpc	r30, r24
 1b8:	f9 07       	cpc	r31, r25
 1ba:	c0 f0       	brcs	.+48     	; 0x1ec <__fp_cmp+0x46>
 1bc:	12 16       	cp	r1, r18
 1be:	13 06       	cpc	r1, r19
 1c0:	e4 07       	cpc	r30, r20
 1c2:	f5 07       	cpc	r31, r21
 1c4:	98 f0       	brcs	.+38     	; 0x1ec <__fp_cmp+0x46>
 1c6:	62 1b       	sub	r22, r18
 1c8:	73 0b       	sbc	r23, r19
 1ca:	84 0b       	sbc	r24, r20
 1cc:	95 0b       	sbc	r25, r21
 1ce:	39 f4       	brne	.+14     	; 0x1de <__fp_cmp+0x38>
 1d0:	0a 26       	eor	r0, r26
 1d2:	61 f0       	breq	.+24     	; 0x1ec <__fp_cmp+0x46>
 1d4:	23 2b       	or	r18, r19
 1d6:	24 2b       	or	r18, r20
 1d8:	25 2b       	or	r18, r21
 1da:	21 f4       	brne	.+8      	; 0x1e4 <__fp_cmp+0x3e>
 1dc:	08 95       	ret
 1de:	0a 26       	eor	r0, r26
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <__fp_cmp+0x3e>
 1e2:	a1 40       	sbci	r26, 0x01	; 1
 1e4:	a6 95       	lsr	r26
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	81 1d       	adc	r24, r1
 1ea:	81 1d       	adc	r24, r1
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
