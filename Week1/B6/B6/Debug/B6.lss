
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000918  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  00001b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	54 c0       	rjmp	.+168    	; 0x144 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:

#include <avr/io.h>
#include <util/delay.h>

void wait( int ms ){
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef ec       	ldi	r30, 0xCF	; 207
  aa:	f7 e0       	ldi	r31, 0x07	; 7
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
	}
}

int main(void)
{
    DDRD = 0b11111111;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	81 bb       	out	0x11, r24	; 17
    int delayInt = 500;
    int pushed = 0;
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
}

int main(void)
{
    DDRD = 0b11111111;
    int delayInt = 500;
  c8:	04 ef       	ldi	r16, 0xF4	; 244
  ca:	11 e0       	ldi	r17, 0x01	; 1
    int pushed = 0;

    while(1)
    {
	    PORTD = 0x10;
  cc:	68 94       	set
  ce:	ff 24       	eor	r15, r15
  d0:	f4 f8       	bld	r15, 4
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
		    
		    pushed = 1;
  d2:	bb 24       	eor	r11, r11
  d4:	b3 94       	inc	r11
  d6:	c1 2c       	mov	r12, r1
	    if(PINC & 0x01)
	    {
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
  d8:	0f 2e       	mov	r0, r31
  da:	f4 ef       	ldi	r31, 0xF4	; 244
  dc:	7f 2e       	mov	r7, r31
  de:	f0 2d       	mov	r31, r0
  e0:	88 24       	eor	r8, r8
  e2:	83 94       	inc	r8
	    wait(delayInt);

	    if(PINC & 0x01)
	    {
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
  e4:	0f 2e       	mov	r0, r31
  e6:	fd e7       	ldi	r31, 0x7D	; 125
  e8:	9f 2e       	mov	r9, r31
  ea:	f0 2d       	mov	r31, r0
  ec:	a1 2c       	mov	r10, r1
		    delayInt = 500;
		    
		    pushed = 1;
	    }
	    else{
		    pushed = 0;
  ee:	d1 2c       	mov	r13, r1
  f0:	e1 2c       	mov	r14, r1
  f2:	0d c0       	rjmp	.+26     	; 0x10e <main+0x4e>
  f4:	cd 2d       	mov	r28, r13
  f6:	de 2d       	mov	r29, r14
  f8:	0a c0       	rjmp	.+20     	; 0x10e <main+0x4e>
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
		    
		    pushed = 1;
  fa:	cb 2d       	mov	r28, r11
  fc:	dc 2d       	mov	r29, r12
	    wait(delayInt);

	    if(PINC & 0x01)
	    {
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
  fe:	09 2d       	mov	r16, r9
 100:	1a 2d       	mov	r17, r10
 102:	05 c0       	rjmp	.+10     	; 0x10e <main+0x4e>
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
		    
		    pushed = 1;
 104:	cb 2d       	mov	r28, r11
 106:	dc 2d       	mov	r29, r12
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x4e>
 10a:	cb 2d       	mov	r28, r11
 10c:	dc 2d       	mov	r29, r12
    int delayInt = 500;
    int pushed = 0;

    while(1)
    {
	    PORTD = 0x10;
 10e:	f2 ba       	out	0x12, r15	; 18
	    wait(delayInt);
 110:	c8 01       	movw	r24, r16
 112:	c5 df       	rcall	.-118    	; 0x9e <wait>
	    PORTD = 0x00;
 114:	12 ba       	out	0x12, r1	; 18
	    wait(delayInt);
 116:	c8 01       	movw	r24, r16
 118:	c2 df       	rcall	.-124    	; 0x9e <wait>

	    if(PINC & 0x01)
 11a:	98 9b       	sbis	0x13, 0	; 19
 11c:	eb cf       	rjmp	.-42     	; 0xf4 <main+0x34>
	    {
		    if(delayInt == 500 && pushed == 0)
 11e:	04 3f       	cpi	r16, 0xF4	; 244
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	18 07       	cpc	r17, r24
 124:	29 f4       	brne	.+10     	; 0x130 <main+0x70>
 126:	cd 2b       	or	r28, r29
 128:	41 f3       	breq	.-48     	; 0xfa <main+0x3a>
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
		    
		    pushed = 1;
 12a:	cb 2d       	mov	r28, r11
 12c:	dc 2d       	mov	r29, r12
 12e:	ef cf       	rjmp	.-34     	; 0x10e <main+0x4e>

	    if(PINC & 0x01)
	    {
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
 130:	0d 37       	cpi	r16, 0x7D	; 125
 132:	11 05       	cpc	r17, r1
 134:	39 f7       	brne	.-50     	; 0x104 <main+0x44>
 136:	cd 2b       	or	r28, r29
 138:	41 f7       	brne	.-48     	; 0x10a <main+0x4a>
		    delayInt = 500;
		    
		    pushed = 1;
 13a:	cb 2d       	mov	r28, r11
 13c:	dc 2d       	mov	r29, r12
	    if(PINC & 0x01)
	    {
		    if(delayInt == 500 && pushed == 0)
		    delayInt = 125;
		    else if(delayInt == 125 && pushed == 0)
		    delayInt = 500;
 13e:	07 2d       	mov	r16, r7
 140:	18 2d       	mov	r17, r8
 142:	e5 cf       	rjmp	.-54     	; 0x10e <main+0x4e>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
