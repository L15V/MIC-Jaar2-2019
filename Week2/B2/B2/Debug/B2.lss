
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000919  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fc  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	52 c0       	rjmp	.+164    	; 0xae <__vector_2>
   a:	00 00       	nop
   c:	70 c0       	rjmp	.+224    	; 0xee <__vector_3>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	43 d0       	rcall	.+134    	; 0x130 <main>
  aa:	50 c0       	rjmp	.+160    	; 0x14c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_2>:
		_delay_ms( 1 );
	}
}

ISR( INT1_vect )
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	if(i < 7){
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c4:	07 97       	sbiw	r24, 0x07	; 7
  c6:	64 f4       	brge	.+24     	; 0xe0 <__vector_2+0x32>
		PORTD = PORTD<<1;
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	88 0f       	add	r24, r24
  cc:	82 bb       	out	0x12, r24	; 18
		i++;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_3>:


ISR( INT2_vect )
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
	if(i > 0){
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 104:	18 16       	cp	r1, r24
 106:	19 06       	cpc	r1, r25
 108:	64 f4       	brge	.+24     	; 0x122 <__vector_3+0x34>
		PORTD = PORTD>>1;
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	86 95       	lsr	r24
 10e:	82 bb       	out	0x12, r24	; 18
		i--;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 114:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main( void )

{
	DDRD = 0b11111111;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000001;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	82 bb       	out	0x12, r24	; 18
	
	EICRA |= 0b00101100;			// INT1 falling edge, INT0 rising edge
 138:	ea e6       	ldi	r30, 0x6A	; 106
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8c 62       	ori	r24, 0x2C	; 44
 140:	80 83       	st	Z, r24
	EIMSK |= 0b00000110;			// Enable INT1 & INT2
 142:	89 b7       	in	r24, 0x39	; 57
 144:	86 60       	ori	r24, 0x06	; 6
 146:	89 bf       	out	0x39, r24	; 57
	
	sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x1a>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
