
B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000998  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000364  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	7c c0       	rjmp	.+248    	; 0x102 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	48 d0       	rcall	.+144    	; 0x154 <main>
  c4:	81 c0       	rjmp	.+258    	; 0x1c8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
	digit--;
	int1 = 1;
}

void wait(int ms) {
	for(int i = 0; i < ms; i++) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  da:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <int0+0x1>
  f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <int0>
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_2>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 114:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 11e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <int1+0x1>
 12a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <int1>
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <display>:
		_delay_ms(1);
	}
}

void display(int digit){
	if(digit < 0 || digit > 10) {
 13c:	8b 30       	cpi	r24, 0x0B	; 11
 13e:	91 05       	cpc	r25, r1
 140:	18 f0       	brcs	.+6      	; 0x148 <display+0xc>
		PORTC = 0b01111001;
 142:	89 e7       	ldi	r24, 0x79	; 121
 144:	85 bb       	out	0x15, r24	; 21
 146:	08 95       	ret
	}
	else {
		PORTC = NUMBERS[digit];
 148:	fc 01       	movw	r30, r24
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	80 81       	ld	r24, Z
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret

00000154 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRC = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x07;
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	85 bb       	out	0x15, r24	; 21
	
	DDRD = 0x00;
 15c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
 15e:	12 ba       	out	0x12, r1	; 18
	
	EICRA = 0x0F;
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x03;
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	89 bf       	out	0x39, r24	; 57

	sei();
 16a:	78 94       	sei

    while (1) 
    {
		if(int0 && int1) {
 16c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <int0>
 170:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <int0+0x1>
 174:	89 2b       	or	r24, r25
 176:	99 f0       	breq	.+38     	; 0x19e <main+0x4a>
 178:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <int1>
 17c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <int1+0x1>
 180:	89 2b       	or	r24, r25
 182:	69 f0       	breq	.+26     	; 0x19e <main+0x4a>
			digit = 0;
 184:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 188:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			int0 = 0;
 18c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <int0+0x1>
 190:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <int0>
			int1 = 0;
 194:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <int1+0x1>
 198:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <int1>
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <main+0x5a>
		}
		else {
			int0 = 0;
 19e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <int0+0x1>
 1a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <int0>
			int1 = 0;
 1a6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <int1+0x1>
 1aa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <int1>
		}
		
		display(digit);
 1ae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1b2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1b6:	c2 df       	rcall	.-124    	; 0x13c <display>
		sleep_mode();
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	80 62       	ori	r24, 0x20	; 32
 1bc:	85 bf       	out	0x35, r24	; 53
 1be:	88 95       	sleep
 1c0:	85 b7       	in	r24, 0x35	; 53
 1c2:	8f 7d       	andi	r24, 0xDF	; 223
 1c4:	85 bf       	out	0x35, r24	; 53
		digit++;
		if(digit == 10){
			digit = 0;
		}
		wait(200);*/
	}
 1c6:	d2 cf       	rjmp	.-92     	; 0x16c <main+0x18>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
