
C1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e69  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d4  00000000  00000000  00001261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f1  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ac  00000000  00000000  000025fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	c4 d0       	rcall	.+392    	; 0x222 <main>
  9a:	0f c1       	rjmp	.+542    	; 0x2ba <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
void displayOff()
{
	spi_slaveSelect(0); // Select display chip
	spi_write(0x0C); // Register 0B: Shutdown register
	spi_write(0x00); // -> 1 = Normal operation
	spi_slaveDeSelect(0); // Deselect display chip
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	e7 ec       	ldi	r30, 0xC7	; 199
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <spi_masterInit>:
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	bb 98       	cbi	0x17, 3	; 23
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	82 e5       	ldi	r24, 0x52	; 82
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <spi_write>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <spi_write+0x2>
  d4:	08 95       	ret

000000d6 <spi_slaveSelect>:
  d6:	98 b3       	in	r25, 0x18	; 24
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <spi_slaveSelect+0xc>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <spi_slaveSelect+0x8>
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	28 bb       	out	0x18, r18	; 24
  ec:	08 95       	ret

000000ee <spi_slaveDeSelect>:
  ee:	98 b3       	in	r25, 0x18	; 24
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <spi_slaveDeSelect+0xc>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <spi_slaveDeSelect+0x8>
  fe:	29 2b       	or	r18, r25
 100:	28 bb       	out	0x18, r18	; 24
 102:	08 95       	ret

00000104 <displayDriverInit>:
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	e7 df       	rcall	.-50     	; 0xd6 <spi_slaveSelect>
 108:	89 e0       	ldi	r24, 0x09	; 9
 10a:	e1 df       	rcall	.-62     	; 0xce <spi_write>
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	df df       	rcall	.-66     	; 0xce <spi_write>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	ed df       	rcall	.-38     	; 0xee <spi_slaveDeSelect>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	df df       	rcall	.-66     	; 0xd6 <spi_slaveSelect>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	d9 df       	rcall	.-78     	; 0xce <spi_write>
 11c:	8f e0       	ldi	r24, 0x0F	; 15
 11e:	d7 df       	rcall	.-82     	; 0xce <spi_write>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	e5 df       	rcall	.-54     	; 0xee <spi_slaveDeSelect>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	d7 df       	rcall	.-82     	; 0xd6 <spi_slaveSelect>
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	d1 df       	rcall	.-94     	; 0xce <spi_write>
 12c:	84 e0       	ldi	r24, 0x04	; 4
 12e:	cf df       	rcall	.-98     	; 0xce <spi_write>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	dd df       	rcall	.-70     	; 0xee <spi_slaveDeSelect>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	cf df       	rcall	.-98     	; 0xd6 <spi_slaveSelect>
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	c9 df       	rcall	.-110    	; 0xce <spi_write>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	c7 df       	rcall	.-114    	; 0xce <spi_write>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	d5 cf       	rjmp	.-86     	; 0xee <spi_slaveDeSelect>
 144:	08 95       	ret

00000146 <spi_writeWord>:
}


void spi_writeWord(unsigned char adress, unsigned char data )
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	d8 2f       	mov	r29, r24
 14c:	c6 2f       	mov	r28, r22
	spi_slaveSelect(0); // Select display chip
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	c2 df       	rcall	.-124    	; 0xd6 <spi_slaveSelect>
	spi_write(adress); // digit adress: (digit place)
 152:	8d 2f       	mov	r24, r29
 154:	bc df       	rcall	.-136    	; 0xce <spi_write>
	spi_write(data); // digit value: 0
 156:	8c 2f       	mov	r24, r28
 158:	ba df       	rcall	.-140    	; 0xce <spi_write>
	spi_slaveDeSelect(0); // Deselect display chip
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	c8 df       	rcall	.-112    	; 0xee <spi_slaveDeSelect>
 15e:	df 91       	pop	r29
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <writeLedDisplay>:
 164:	0f 93       	push	r16

void writeLedDisplay( int value )
{
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	c0 31       	cpi	r28, 0x10	; 16
 170:	87 e2       	ldi	r24, 0x27	; 39
 172:	d8 07       	cpc	r29, r24
 174:	14 f0       	brlt	.+4      	; 0x17a <writeLedDisplay+0x16>
 176:	cf e0       	ldi	r28, 0x0F	; 15
 178:	d7 e2       	ldi	r29, 0x27	; 39
	if(value > 9999){
		value = 9999;
	}
	if(value < 0)
 17a:	dd 23       	and	r29, r29
 17c:	54 f5       	brge	.+84     	; 0x1d2 <writeLedDisplay+0x6e>
		if(value < -999)
		{
			value = -999;
		}

		int tempValue = abs(value);
 17e:	c9 31       	cpi	r28, 0x19	; 25
 180:	8c ef       	ldi	r24, 0xFC	; 252
 182:	d8 07       	cpc	r29, r24
 184:	14 f4       	brge	.+4      	; 0x18a <writeLedDisplay+0x26>
 186:	c9 e1       	ldi	r28, 0x19	; 25
 188:	dc ef       	ldi	r29, 0xFC	; 252
 18a:	8e 01       	movw	r16, r28
 18c:	dd 23       	and	r29, r29
 18e:	24 f4       	brge	.+8      	; 0x198 <writeLedDisplay+0x34>
 190:	00 27       	eor	r16, r16
 192:	11 27       	eor	r17, r17
 194:	0c 1b       	sub	r16, r28
 196:	1d 0b       	sbc	r17, r29
		int num3 = (tempValue / 1) % 10;
		int num2 = (tempValue / 10) % 10;
		int num1 = (tempValue / 100) % 10;

		spi_writeWord(4, 10);
 198:	6a e0       	ldi	r22, 0x0A	; 10
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	d4 df       	rcall	.-88     	; 0x146 <spi_writeWord>
		spi_writeWord(3, num1);
 19e:	c8 01       	movw	r24, r16
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	63 d0       	rcall	.+198    	; 0x26c <__divmodhi4>
 1a6:	cb 01       	movw	r24, r22
 1a8:	ca e0       	ldi	r28, 0x0A	; 10
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
 1ac:	be 01       	movw	r22, r28
 1ae:	5e d0       	rcall	.+188    	; 0x26c <__divmodhi4>
 1b0:	68 2f       	mov	r22, r24
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	c8 df       	rcall	.-112    	; 0x146 <spi_writeWord>
		spi_writeWord(2, num2);
 1b6:	c8 01       	movw	r24, r16
 1b8:	be 01       	movw	r22, r28
 1ba:	58 d0       	rcall	.+176    	; 0x26c <__divmodhi4>
 1bc:	18 2f       	mov	r17, r24
 1be:	cb 01       	movw	r24, r22
 1c0:	be 01       	movw	r22, r28
 1c2:	54 d0       	rcall	.+168    	; 0x26c <__divmodhi4>
 1c4:	68 2f       	mov	r22, r24
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	be df       	rcall	.-132    	; 0x146 <spi_writeWord>
		spi_writeWord(1, num3);
 1ca:	61 2f       	mov	r22, r17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	bb df       	rcall	.-138    	; 0x146 <spi_writeWord>
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <writeLedDisplay+0xb4>
		int num4 = (value / 1) % 10;
		int num3 = (value / 10) % 10;
		int num2 = (value / 100) % 10;
		int num1 = (value / 1000) % 10;

		spi_writeWord(4, num1);
 1d2:	ce 01       	movw	r24, r28
 1d4:	68 ee       	ldi	r22, 0xE8	; 232
 1d6:	73 e0       	ldi	r23, 0x03	; 3
 1d8:	49 d0       	rcall	.+146    	; 0x26c <__divmodhi4>
 1da:	cb 01       	movw	r24, r22
 1dc:	0a e0       	ldi	r16, 0x0A	; 10
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	b8 01       	movw	r22, r16
 1e2:	44 d0       	rcall	.+136    	; 0x26c <__divmodhi4>
 1e4:	68 2f       	mov	r22, r24
 1e6:	84 e0       	ldi	r24, 0x04	; 4
		spi_writeWord(3, num2);
 1e8:	ae df       	rcall	.-164    	; 0x146 <spi_writeWord>
 1ea:	ce 01       	movw	r24, r28
 1ec:	64 e6       	ldi	r22, 0x64	; 100
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	3d d0       	rcall	.+122    	; 0x26c <__divmodhi4>
 1f2:	cb 01       	movw	r24, r22
 1f4:	b8 01       	movw	r22, r16
 1f6:	3a d0       	rcall	.+116    	; 0x26c <__divmodhi4>
 1f8:	68 2f       	mov	r22, r24
 1fa:	83 e0       	ldi	r24, 0x03	; 3
		spi_writeWord(2, num3);
 1fc:	a4 df       	rcall	.-184    	; 0x146 <spi_writeWord>
 1fe:	ce 01       	movw	r24, r28
 200:	b8 01       	movw	r22, r16
 202:	34 d0       	rcall	.+104    	; 0x26c <__divmodhi4>
 204:	c8 2f       	mov	r28, r24
 206:	cb 01       	movw	r24, r22
 208:	b8 01       	movw	r22, r16
 20a:	30 d0       	rcall	.+96     	; 0x26c <__divmodhi4>
 20c:	68 2f       	mov	r22, r24
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	9a df       	rcall	.-204    	; 0x146 <spi_writeWord>
 212:	6c 2f       	mov	r22, r28
 214:	81 e0       	ldi	r24, 0x01	; 1
		spi_writeWord(1, num4);
 216:	97 df       	rcall	.-210    	; 0x146 <spi_writeWord>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
	}
}
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <main>:
 222:	cf 93       	push	r28
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	87 bb       	out	0x17, r24	; 23


int main()
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
 228:	4b df       	rcall	.-362    	; 0xc0 <spi_masterInit>
	displayDriverInit(); // Initialize display chip
 22a:	6c df       	rcall	.-296    	; 0x104 <displayDriverInit>
 22c:	c1 e0       	ldi	r28, 0x01	; 1
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 22e:	60 e0       	ldi	r22, 0x00	; 0
	{
		spi_writeWord(i, 0);
 230:	8c 2f       	mov	r24, r28
 232:	89 df       	rcall	.-238    	; 0x146 <spi_writeWord>
 234:	cf 5f       	subi	r28, 0xFF	; 255
{
	DDRB=0x01; // Set PB0 pin as output for display select
	spi_masterInit(); // Initialize spi module
	displayDriverInit(); // Initialize display chip
	// clear display (all zero's)
	for (char i =1; i<=4; i++)
 236:	c5 30       	cpi	r28, 0x05	; 5
 238:	d1 f7       	brne	.-12     	; 0x22e <main+0xc>
	{
		spi_writeWord(i, 0);
	}
	wait(1000);
 23a:	88 ee       	ldi	r24, 0xE8	; 232
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	2f df       	rcall	.-418    	; 0x9e <wait>
	// write 4-digit data
	writeLedDisplay(-115);
 240:	8d e8       	ldi	r24, 0x8D	; 141
 242:	9f ef       	ldi	r25, 0xFF	; 255
 244:	8f df       	rcall	.-226    	; 0x164 <writeLedDisplay>
	wait(10000);
 246:	80 e1       	ldi	r24, 0x10	; 16
 248:	97 e2       	ldi	r25, 0x27	; 39
 24a:	29 df       	rcall	.-430    	; 0x9e <wait>
	wait(10000);
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	97 e2       	ldi	r25, 0x27	; 39
 250:	26 df       	rcall	.-436    	; 0x9e <wait>
	wait(10000);
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	97 e2       	ldi	r25, 0x27	; 39
 256:	23 df       	rcall	.-442    	; 0x9e <wait>
	writeLedDisplay(4356);
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	91 e1       	ldi	r25, 0x11	; 17
 25c:	83 df       	rcall	.-250    	; 0x164 <writeLedDisplay>
 25e:	88 ee       	ldi	r24, 0xE8	; 232
	wait(1000);
 260:	93 e0       	ldi	r25, 0x03	; 3
 262:	1d df       	rcall	.-454    	; 0x9e <wait>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <__divmodhi4>:
 26c:	97 fb       	bst	r25, 7
 26e:	07 2e       	mov	r0, r23
 270:	16 f4       	brtc	.+4      	; 0x276 <__divmodhi4+0xa>
 272:	00 94       	com	r0
 274:	06 d0       	rcall	.+12     	; 0x282 <__divmodhi4_neg1>
 276:	77 fd       	sbrc	r23, 7
 278:	08 d0       	rcall	.+16     	; 0x28a <__divmodhi4_neg2>
 27a:	0b d0       	rcall	.+22     	; 0x292 <__udivmodhi4>
 27c:	07 fc       	sbrc	r0, 7
 27e:	05 d0       	rcall	.+10     	; 0x28a <__divmodhi4_neg2>
 280:	3e f4       	brtc	.+14     	; 0x290 <__divmodhi4_exit>

00000282 <__divmodhi4_neg1>:
 282:	90 95       	com	r25
 284:	81 95       	neg	r24
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	08 95       	ret

0000028a <__divmodhi4_neg2>:
 28a:	70 95       	com	r23
 28c:	61 95       	neg	r22
 28e:	7f 4f       	sbci	r23, 0xFF	; 255

00000290 <__divmodhi4_exit>:
 290:	08 95       	ret

00000292 <__udivmodhi4>:
 292:	aa 1b       	sub	r26, r26
 294:	bb 1b       	sub	r27, r27
 296:	51 e1       	ldi	r21, 0x11	; 17
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <__udivmodhi4_ep>

0000029a <__udivmodhi4_loop>:
 29a:	aa 1f       	adc	r26, r26
 29c:	bb 1f       	adc	r27, r27
 29e:	a6 17       	cp	r26, r22
 2a0:	b7 07       	cpc	r27, r23
 2a2:	10 f0       	brcs	.+4      	; 0x2a8 <__udivmodhi4_ep>
 2a4:	a6 1b       	sub	r26, r22
 2a6:	b7 0b       	sbc	r27, r23

000002a8 <__udivmodhi4_ep>:
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	5a 95       	dec	r21
 2ae:	a9 f7       	brne	.-22     	; 0x29a <__udivmodhi4_loop>
 2b0:	80 95       	com	r24
 2b2:	90 95       	com	r25
 2b4:	bc 01       	movw	r22, r24
 2b6:	cd 01       	movw	r24, r26
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
